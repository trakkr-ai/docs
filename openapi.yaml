openapi: 3.1.0
info:
  title: Trakkr API
  description: Monitor your brand visibility and presence across AI models and prompts
  version: 1.0.0
  contact:
    name: Trakkr Support
    email: support@trakkr.ai
  license:
    name: Proprietary
servers:
  - url: https://api.trakkr.ai
    description: Production server
paths:
  /get-scores:
    get:
      summary: Get historical brand scores
      description: Retrieve historical brand visibility and presence scores with optional breakdowns by AI model and/or prompt.
      operationId: getScores
      security:
        - bearerAuth: []
      parameters:
        - name: brand
          in: query
          required: true
          schema:
            type: string
          description: The brand ID (32-character string in format: 0000000000000x000000000000000000)
          example: "0000000000000x000000000000000000"
        - name: breakdown
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum: 
                - model
                - prompt
          description: Array of breakdown types. Valid values: ["model"], ["prompt"], or ["model", "prompt"]
          example: 
            - "model"
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Start date in YYYY-MM-DD format. If not provided, defaults to 28 days before end_date
          example: "2025-01-01"
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: End date in YYYY-MM-DD format. If not provided, defaults to the most recent report date
          example: "2025-01-31"
        - name: cache
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to use cached results
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  brand_id:
                    type: string
                    description: The brand ID that was queried
                    example: "0000000000000x000000000000000000"
                  start_date:
                    type: string
                    format: date
                    description: The start date used for the query
                    example: "2025-01-01"
                  end_date:
                    type: string
                    format: date
                    description: The end date used for the query
                    example: "2025-01-31"
                  breakdown:
                    type: array
                    description: The breakdown types that were requested
                    items:
                      type: string
                    example: 
                      - "model"
                  data:
                    type: array
                    description: Array of daily report data
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                          description: The report date
                          example: "2025-01-01"
                        visibility:
                          type: number
                          description: Brand visibility score (0.00 to 100.00)
                          example: 85.50
                        presence:
                          type: number
                          description: Brand presence score (0.00 to 100.00)
                          example: 92.30
                        models:
                          type: array
                          description: Model breakdown data (if "model" in breakdown)
                          items:
                            type: object
                            properties:
                              model:
                                type: string
                                description: The AI model name
                                example: "GPT-4"
                              visibility:
                                type: number
                                description: Model-specific visibility score
                                example: 88.20
                              presence:
                                type: number
                                description: Model-specific presence score
                                example: 94.10
                        prompts:
                          type: array
                          description: Prompt breakdown data (if "prompt" in breakdown)
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                description: Unique prompt identifier
                                example: "prompt_001"
                              visibility:
                                type: number
                                description: Prompt-specific visibility score
                                example: 89.30
                              presence:
                                type: number
                                description: Prompt-specific presence score
                                example: 95.20
                              prompt:
                                type: string
                                description: The actual prompt text
                                example: "What are the best financial services companies?"
                        model_prompt_breakdown:
                          type: array
                          description: Combined model/prompt data (if both in breakdown)
                          items:
                            type: object
                            properties:
                              model:
                                type: string
                                description: The AI model name
                                example: "GPT-4"
                              prompt:
                                type: string
                                description: The prompt text
                                example: "What are the best financial services companies?"
                              rank:
                                type: integer
                                nullable: true
                                description: Brand's position in the response (null if not mentioned)
                                example: 3
                  errors:
                    type: array
                    nullable: true
                    description: Array of error messages (null if no errors)
                    items:
                      type: string
              examples:
                basic_response:
                  summary: Basic response (no breakdown)
                  value:
                    brand_id: "0000000000000x000000000000000000"
                    start_date: "2025-01-01"
                    end_date: "2025-01-31"
                    breakdown: []
                    data:
                      - date: "2025-01-01"
                        visibility: 85.50
                        presence: 92.30
                      - date: "2025-01-02"
                        visibility: 87.20
                        presence: 91.80
                    errors: null
                model_breakdown_response:
                  summary: Response with model breakdown
                  value:
                    brand_id: "0000000000000x000000000000000000"
                    start_date: "2025-01-01"
                    end_date: "2025-01-31"
                    breakdown: ["model"]
                    data:
                      - date: "2025-01-01"
                        visibility: 85.50
                        presence: 92.30
                        models:
                          - model: "GPT-4"
                            visibility: 88.20
                            presence: 94.10
                          - model: "Claude"
                            visibility: 82.80
                            presence: 90.50
                    errors: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /get-brands:
    get:
      summary: Get accessible brands
      description: Retrieve list of brands accessible to your API key (coming soon)
      operationId: getBrands
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  brands:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Brand ID
                        name:
                          type: string
                          description: Brand name
                        description:
                          type: string
                          description: Brand description
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: API key authentication
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error title
          example: "Missing required parameter: brand"
        errors:
          type: array
          items:
            type: string
          description: Detailed error messages
          example: ["brand parameter is required"]
      required:
        - error
        - errors 